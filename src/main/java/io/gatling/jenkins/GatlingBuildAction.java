/**
 * Copyright 2011-2012 eBusiness Information, Groupe Excilys (www.excilys.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gatling.jenkins;

import io.gatling.jenkins.targetenvgraphs.TargetGraphGenerator;
import hudson.FilePath;

import hudson.model.Action;
import hudson.model.Run;
import io.gatling.jenkins.targetenvgraphs.envgraphs.graphite.GrafanaUrl;
import jenkins.tasks.SimpleBuildStep;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static io.gatling.jenkins.PluginConstants.*;

/**
  * An Action to add to a project/job's build/run page in the UI.
  *
  * Note that in order to be compatible with the new Jenkins Pipeline jobs,
  * Actions that should be added to the project/job's page directly must be added
  * by implementing the SimpleBuildStep.LastBuildAction interface, and encapsulating
  * the project actions in the build action via the getProjectActions method.
  *
  * This is necessary and now preferred to the old approach of defining getProjectAction
  * directly on the Publisher, because for a Pipeline job, Jenkins doesn't know ahead
  * of time what actions will be triggered, and will never call the Publisher.getProjectAction
  * method.  Attaching it as a LastBuildAction means that it is discoverable once
  * the Pipeline job has been run once.
  */

public class GatlingBuildAction implements Action, SimpleBuildStep.LastBuildAction{

	private final Run<?, ?> run;
	private final List<BuildSimulation> simulations;
    private final List<AssertionData> assertionDataList;

	// New Properties and methods are added to be able to read GatlingBuildAction object generated by version 1.0.1 or earlier.
	private final String simulationName = null;
	private final RequestReport requestReport = null;
	private final FilePath simulationDirectory = null;

	public String getSimulationName() {
		return simulationName;
	}

	public RequestReport getRequestReport() {
		return requestReport;
	}

	public FilePath getSimulationDirectory() {
		return simulationDirectory;
	}

	public GatlingBuildAction(Run<?, ?> run, List<BuildSimulation> sims, List<AssertionData> assertionDataList) {
		this.run = run;
		this.simulations = sims;
		this.assertionDataList = assertionDataList;
	}

	public Run<?, ?> getRun() {
		return run;
	}

	public List<BuildSimulation> getSimulations() {
		return simulations;
	}

	public String getIconFileName() {return ICON_URL;}

	public String getDisplayName() {
		return DISPLAY_NAME_REPORTS;
	}

	public String getUrlName() {
		return URL_NAME;
	}

	/**
	 * This method is called dynamically for any HTTP request to our plugin's
	 * URL followed by "/report/SomeSimulationName".
	 *
	 * It returns a new instance of {@link ReportRenderer}, which contains the
	 * actual logic for rendering a report.
	 *
	 * @param simulationName the name of the simulation
	 */
    public ReportRenderer getReport(String simulationName) {
        return new ReportRenderer(this, getSimulation(simulationName));
    }


	public String getReportURL(String simulationName) {
		return new StringBuilder().append(URL_NAME).append("/report/").append(simulationName).toString();
	}

	public String getSimulationClassSourceURL(String simulationName) {
		return URL_NAME + "/report/" + simulationName + "/simulationclasssource/";
	}

	public String getSimulationClassSourceURL(Integer buildNum,String simulationName) {
		return String.valueOf(buildNum) + "/" + URL_NAME + "/report/" + simulationName + "/simulationclasssource/";
	}

    public String getTargetEnvGraphURL(String simulationName) {
        return URL_NAME + "/report/" + simulationName + "/targetenvgraph/";
    }

    public String getTargetEnvGraphURL(Integer buildNum,String simulationName) {
        return String.valueOf(buildNum) + "/" + getTargetEnvGraphURL(simulationName);
    }

	private BuildSimulation getSimulation(String simulationName) {
		// this isn't the most efficient implementation in the world :)
		for (BuildSimulation sim : this.getSimulations()) {
			if (sim.getSimulationName().equals(simulationName)) {
		        return sim;
		      }
		    }
		return null;
	}

	@Override
	public Collection<? extends Action> getProjectActions() {
		List<GatlingProjectAction> projectActions = new ArrayList<>();
		projectActions.add(new GatlingProjectAction(run.getParent()));
		return projectActions;
	}

    public List<AssertionData> getAssertionDataList() {
        return this.assertionDataList;
    }

    /*
     This will be here until a dedicated reporter can be made for TargetEnvGraphs
     */
    public ArrayList<GrafanaUrl> getTargetEnvGraphUrls() {
        TargetGraphGenerator myGenerator = new TargetGraphGenerator();
		return myGenerator.getGraphUrls(run);
    }

	public GrafanaUrl getAppDynamicsUrl()
	{
		TargetGraphGenerator myGenerator = new TargetGraphGenerator();
		return myGenerator.getAppDUrl(run);
	}

    public String getTargetEnvGraphMessage() {
        if(getTargetEnvGraphUrls().size() < 1) {
            return "No stats available for this simulation.";
        } else {
            return "";
        }
    }
}
